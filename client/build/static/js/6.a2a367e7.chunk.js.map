{"version":3,"sources":["components/SupplyChain.js","components/MapView.js","components/CountyChart.js","components/HeatMapView.js","components/StateChart.js","utils/HeatmapLayer.js","components/TrendMapView.js","components/FluTrendChart.js","components/MarketingAnalytics.js","components/ModalTable.js","components/ModalChart.js","components/ModalHighChart.js","components/ModalContent.js","images/unamed3.png"],"names":["maps","require","Highcharts","SupplyChain","state","stateData","usStates","usState","activity","dataOptions","dataOption","config","defaultMapConfig","handleChange","e","_this","setState","target","value","drawMap","handleDataOption","handleSort","mapData","_this$state","i","push","States","code","POSTALCODE","filter","item","sortBy","splice","reverse","chart","map","borderWidth","title","text","exporting","sourceWidth","sourceHeight","legend","layout","backgroundColor","floating","verticalAlign","y","mapNavigation","enabled","colorAxis","min","type","minColor","maxColor","stops","series","data","joinBy","dataLabels","color","format","name","tooltip","pointFormat","_this2","this","loc","window","location","hostname","fetch","concat","then","res","json","StateSupply","Object","keys","groupBy","catch","error","console","react_default","a","createElement","Fragment","className","onChange","s","key","style","marginTop","SupplyChain_MapChart","React","Component","MapChart","props","highcharts_react_official_default","highcharts","constructorType","options","info","L","control","MapView","lat","lng","zoom","defaultView","crumbs","show","addStateMap","addTileLayer","d","area","times","feature","arguments","length","undefined","fillColor","getColor","properties","density","weight","opacity","dashArray","fillOpacity","layer","refs","leafletElement","eachLayer","setStyle","update","Browser","ie","opera","edge","bringToFront","geoJSON","GEOJSON","features","onEachFeature","addTo","infoControl","displayLegend","stateName","_this3","updateState","countyPop","population","michigan","log","_loop","p","County","Population","pop","convertToNum","updatedStateFeatures","str","n","split","Number","parseInt","reduce","b","_this4","onEachStateFeature","content","latlng","divIcon","html","String","_this5","thorsten","t","modalContent","handleShow","street","city","zip","_this6","stores","pointToLayer","popContent","marker","icon","markerIcon","id","bindPopup","buildCrumbs","_this7","fitBounds","getBounds","removeLayer","addPointers","on","mouseover","highlightFeature","bind","mouseout","resetHighlight","click","zoomToFeature","tileLayer","crumbList","forEach","index","breadCrumbs","onAdd","_div","DomUtil","create","innerHTML","position","div","_this8","cls","grades","Map","center","zoomControl","ref","CountyChart","crumbsList","class","MapView_MapView","HeatMapView","ZCTA5CE10","StateChart","HeatMapView_HeatMapView","isInvalid","num","isNumber","isValid","isInvalidLatLngArray","arr","isValidLatLngArray","safeRemoveLayer","leafletMap","el","overlayPane","getPanes","contains","removeChild","shouldIgnoreLocation","withLeaflet","_temp","_class","_MapLayer","HeatmapLayer","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","canAnimate","leaflet","zoomAnimation","any3d","zoomClass","mapSize","getSize","transformProp","testProp","_el","width","x","height","Heatmap","Layer","extend","appendChild","addLayer","onRemove","get","prototype","call","_heatmap","simpleheat","reset","fitBoundsOnLoad","attachEvents","updateHeatmapProps","getHeatmapProps","max","radius","maxZoom","minOpacity","blur","getMinOpacity","getMaxZoom","getRadius","getBlur","getMax","gradient","nextProps","currentProps","nextHeatmapProps","updateHeatmapGradient","hasRadiusUpdated","hasBlurUpdated","updateHeatmapRadius","updateHeatmapMax","maximum","points","lngs","longitudeExtractor","lats","latitudeExtractor","ne","sw","latLngBounds","latLng","invalidateSize","fitBoundsOnUpdate","_animateZoom","scale","getZoomScale","offset","_getCenterOffset","_multiplyBy","subtract","_getMapPanePos","setTransform","TRANSFORM","getTranslateString","topLeft","containerPointToLayerPoint","setPosition","size","_width","_height","_frame","_animating","Util","requestAnimFrame","redraw","r","_r","maxIntensity","v","Math","pow","getZoom","cellSize","panePos","offsetX","offsetY","getLat","getLng","getIntensity","intensityExtractor","roundResults","results","result","row","c","filterUndefined","cell","round","bounds","grid","point","latLngToContainerPoint","inBounds","floor","k","accumulateInGrid","Bounds","add","clear","draw","onStatsUpdate","stats","Infinity","MapLayer","propTypes","PropTypes","array","isRequired","func","bool","number","object","TrendMapView","_stateName","toLowerCase","utils_HeatmapLayer","m","parseFloat","FluTrendChart","TrendMapView_TrendMapView","MarketingAnalytics","toggle","assertThisInitialized","activeTab","tab","match","Common","header","NavLink","exact","activeClassName","to","path","Route","render","component","ModalTable","reactstrap_es","striped","bordered","condensed","hover","values","ModalChart","src","img","ModalHighChart","yAxis","labels","opposite","align","plotOptions","label","connectorAllowed","pointStart","predict","WEEK_TEMP","TEMP_PREDICTION","ACTIVITY_PREDICTION","responsive","rules","condition","maxWidth","chartOptions","ReactHighcharts_default","ModalContent","contentType","toUpperCase","components_ModalTable","csvjson","components_ModalChart","metrics","components_ModalHighChart","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/6.a2a367e7.chunk.js","sourcesContent":["import React from 'react'\nimport {render} from 'react-dom'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport {groupBy, sortBy, reverse} from 'lodash';\nimport {PageHeader, defaultMapConfig} from '../utils/Common';\nconst HC_map = require('highcharts/modules/map')(Highcharts);\n\nvar maps = require('../utils/us.all');\nclass SupplyChain extends React.Component {\n    state = {\n        stateData: [],\n        usStates: [],\n        usState: \"all\",\n        activity: \"0\",\n        dataOptions: [\n            \"6_months_17_years\", \"6_months_4_years\", \"5-12_years\", \"13-17_years\"\n        ],\n        dataOption: \"6_months_17_years\",\n        config: defaultMapConfig\n    }\n    componentDidMount() {\n        const loc = window.location.hostname === \"localhost\"\n            ? \"http://localhost:5000\"\n            : \"\"\n        fetch(`${loc}/api/statesupply`)\n            .then(res => res.json())\n            .then(res => {\n                this.setState({\n                    stateData: res.StateSupply,\n                    usStates: Object.keys(groupBy(res.StateSupply, \"States\"))\n                }, () => {\n                    this.drawMap()\n                });\n            })\n            .catch(error => console.error('Error:', error))\n    }\n    handleChange = (e) => {\n        this.setState({\n            usState: e.target.value\n        }, () => {\n            this.drawMap()\n        });\n    }\n    handleDataOption = (e) => {\n        this.setState({\n            dataOption: e.target.value\n        }, () => {\n            this.drawMap()\n        });\n\n    }\n    handleSort = (e) => {\n        this.setState({\n            activity: e.target.value\n        }, () => {\n            this.drawMap()\n        })\n    }\n    drawMap = () => {\n        let mapData = [];\n        let {stateData, dataOption} = this.state;\n        for (let i in stateData) {\n            mapData.push({state: stateData[i].States, code: stateData[i].POSTALCODE, value: stateData[i][dataOption]\n            })\n        }\n        if (this.state.usState != \"all\") {\n            mapData = mapData.filter(item => item.state === this.state.usState)\n        }\n        if (this.state.activity === \"1\") {\n            mapData = sortBy(mapData, ['value']).splice(1, 10);\n        }\n        if (this.state.activity === \"2\") {\n            mapData = reverse(sortBy(mapData, ['value'])).splice(1, 10);\n        }\n        const config = {\n            chart: {\n                map: maps,\n                borderWidth: 0\n            },\n            title: {\n                text: 'Vaccination Rates'\n            },\n            exporting: {\n                sourceWidth: 600,\n                sourceHeight: 600\n            },\n            legend: {\n                layout: 'horizontal',\n                borderWidth: 0,\n                backgroundColor: 'rgba(255,255,255,0.85)',\n                floating: true,\n                verticalAlign: 'bottom',\n                y: 25\n            },\n            mapNavigation: {\n                enabled: true\n            },\n            colorAxis: {\n                min: 1,\n                type: 'logarithmic',\n                minColor: '#DDDDDD',\n                maxColor: '#BAF480',\n                stops: [\n                    [\n                        0, '#492C3C'\n                    ],\n                    [\n                        0.2, '#55455E'\n                    ],\n                    [\n                        0.5, '#63637F'\n                    ],\n                    [\n                        0.7, '#448298'\n                    ],\n                    [1, '#BAF480']\n                ]\n            },\n            series: [\n                {\n                    data: mapData,\n                    joinBy: [\n                        'postal-code', 'code'\n                    ],\n                    dataLabels: {\n                        enabled: true,\n                        color: '#FFFFFF',\n                        format: '{point.code}'\n                    },\n                    name: dataOption,\n                    tooltip: {\n                        pointFormat: '{point.code}: {point.value}'\n                    }\n                }\n            ]\n        }\n        this.setState({config});\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"row placeholders\">\n                    <div className=\"col-xs-12 col-sm-12 placeholder insight-tab\">\n                        <div className=\"row\">\n                            <div className=\"col col-md-2\">\n                                <select\n                                    className=\"form-control\"\n                                    value={this.state.usState}\n                                    onChange={this.handleChange}>\n                                    <option value=\"all\">All States</option>\n                                    {this\n                                        .state\n                                        .usStates\n                                        .map(s => <option key={s} value={s}>{s}</option>)}\n                                </select>\n                            </div>\n                            <div className=\"col col-md-5\">\n                                <div className=\"row\">\n                                    <div className=\"col col-md-3 pr-0 pt-2\">Age Group</div>\n                                    <div className=\"col col-md-6 pl-0\">\n                                        <select\n                                            className=\"form-control\"\n                                            value={this.state.dataOption}\n                                            onChange={this.handleDataOption}>\n                                            {this\n                                                .state\n                                                .dataOptions\n                                                .map(s => <option key={s} value={s}>{s}</option>)}\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col col-md-4\">\n                                <div className=\"row\">\n                                    <div className=\"col col-md-2 pr-0 pt-2\">Sort</div>\n                                    <div className=\"col col-md-10 pl-0\">\n                                        <select\n                                            className=\"form-control\"\n                                            value={this.state.activity}\n                                            onChange={this.handleSort}>\n                                            <option value=\"0\">All</option>\n                                            <option value=\"1\">States with Low Vaccination Rates</option>\n                                            <option value=\"2\">States with risk of High Activity</option>\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div\n                            className=\"row\"\n                            style={{\n                            marginTop: 20\n                        }}>\n                            <div className=\"col col-md-12\">\n                                <MapChart config={this.state.config}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nconst MapChart = (props) => {\n    return (<HighchartsReact\n        highcharts={Highcharts}\n        constructorType={'mapChart'}\n        options={props.config}/>)\n}\n\nexport default SupplyChain;","import React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Map, TileLayer, Marker, Popup, GeoJSON} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport GEOJSON from \"../dataSet/stateData.json\";\nimport txs from \"../dataSet/texas.json\";\nimport mi from \"../dataSet/michigan.json\";\nimport michigan from \"../dataSet/michigan.json\";\nimport county from \"../dataSet/country.json\";\nimport stores from \"../dataSet/stores.json\";\nimport Select from \"react-select\";\nimport $ from 'jquery';\nimport options from \"../dataSet/us-states.json\";\nvar info = L.control();\nexport default class MapView extends Component {\n  state = {\n    lat: 44.3,\n    lng: -80.6,\n    zoom: 6,\n    data: [],\n    stateData: [],\n    defaultView: \"country\",\n    crumbs: [\"USA\"],\n    show: false\n  };\n  componentDidMount() {\n    //this.addCountryMap(); this.addCountyMap();\n    this.addStateMap('michigan');\n    this.addTileLayer();\n  }\n\n  getColor(d, area) {\n    const times = area != \"state\"\n      ? 15\n      : 1;\n    return d > 1000 * times\n      ? \"#800026\"\n      : d > 500 * times\n        ? \"#BD0026\"\n        : d > 200 * times\n          ? \"#E31A1C\"\n          : d > 100 * times\n            ? \"#FC4E2A\"\n            : d > 50 * times\n              ? \"#FD8D3C\"\n              : d > 20 * times\n                ? \"#FEB24C\"\n                : d > 10 * times\n                  ? \"#FED976\"\n                  : \"#DDDDDD\";\n  }\n  style(feature, area = \"state\") {\n    return {\n      fillColor: this.getColor(feature.properties.density, area),\n      weight: 2,\n      opacity: 1,\n      color: \"white\",\n      dashArray: \"3\",\n      fillOpacity: 0.7\n    };\n  }\n  countyStyle(feature) {\n    return {weight: 1, opacity: 1, color: \"black\", dashArray: \"2\", fillOpacity: 0.3};\n  }\n  highlightFeature(feature, layer, area) {\n    //var layer = e.target;\n    this\n      .refs\n      .map\n      .leafletElement\n      .eachLayer(layer => {\n        //console.log(layer);\n      });\n    layer.setStyle({weight: 2, color: \"#666\", dashArray: \"\", fillOpacity: 0.7});\n    //console.log(layer.feature)\n    info.update(layer.feature.properties, area);\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n    }\n  }\n  resetHighlight(feature, layer, area) {\n    layer.setStyle({weight: 2, opacity: 1, color: \"white\", dashArray: \"3\", fillOpacity: 0.7});\n    info.update(layer.feature.properties, area);\n    //geojson.resetStyle(e.target);\n  }\n  addCountryMap() {\n    L.geoJSON(GEOJSON.features, {\n      onEachFeature: (feature, layer) => this.onEachFeature(feature, layer),\n      style: feature => this.style(feature)\n    }).addTo(this.refs.map.leafletElement);\n    this.infoControl();\n    this.displayLegend(\"state\");\n  }\n  addCountyMap() {\n    //L.geoJSON(uscounties.features).addTo(this.refs.map.leafletElement);\n  }\n  addStateMap(stateName) {\n    let updateState = [];\n    //this.displayReset()\n    const loc = window.location.hostname === \"localhost\"\n      ? \"http://localhost:5000\"\n      : \"\"\n    fetch(`${loc}/api/countyPop`)\n      .then(res => res.json())\n      .then(res => {\n        let countyPop = res.population;\n        let state = michigan.features;\n        console.log(countyPop)\n        for (let i in state) {\n          const p = countyPop\n            .filter(item => item.County === state[i].properties.name)\n            .map(item => item.Population);\n          const pop = p[0] != undefined\n            ? this.convertToNum(p[0])\n            : 0;\n          state[i].properties.density = pop;\n          updateState.push(state[i]);\n        }\n        this.updatedStateFeatures(updateState);\n        this.infoControl();\n        //$(\".state\").css(\"display\", \"none\")\n        this.displayLegend(\"county\");\n      })\n      .catch(error => console.error('Error:', error));\n\n  }\n  convertToNum(str) {\n    var n = str\n      .split(\",\")\n      .map(Number);\n    return parseInt(n.reduce((a, b) => a + b, ''));\n  }\n  updatedStateFeatures(data) {\n    console.log(data)\n    L.geoJSON(data, {\n      onEachFeature: (feature, layer) => this.onEachStateFeature(feature, layer),\n      style: feature => this.style(feature, \"county\")\n    }).addTo(this.refs.map.leafletElement);\n    this.addTileLayer();\n  }\n  markerIcon(content, latlng) {\n    return L.divIcon({className: \"my-div-icon\", html: String(content)});\n  }\n  localFunc() {\n    console.log(\"POP\");\n  }\n  popContent(props) {\n    const {properties} = props;\n    const t = modalContent => {\n      this\n        .props\n        .handleShow(modalContent);\n    };\n    L.thorsten = {};\n    L.thorsten.t = t;\n    const htmlStr = `<div class=\"container\">\n                        <div class=\"row pop-pad\">\n                            <h4>${properties.name}</h4>\n                            <div class=\"pop-address\">${properties.street}</div>\n                            <div class=\"pop-address\">${properties.city}, ${\n    properties.state}, ${properties.zip}</div>\n                        </div>\n                        <div class=\"row pop-address pop-pad\">\n                            <b>Flu Season</b>\n                            <select>\n                                <option>2018-2019</option>\n                                <option>2017-2018</option>\n                            </select>\n                        </div>\n                        <div class=\"row pop-address\">\n                            <a nohref onclick=\"L.thorsten.t('table')\">Table</a> | \n                            <a nohref onclick=\"L.thorsten.t('chart')\">Chart</a> | \n                            <a nohref onclick=\"L.thorsten.t('metrics')\">Metrics</a>| \n                            <a nohref onclick=\"L.thorsten.t('predict line')\">Predict Line</a>\n                        </div>\n                    </div>`;\n    return htmlStr;\n  }\n  addPointers() {\n    L.geoJSON(stores.features, {\n      pointToLayer: (feature, latlng) => {\n        const {properties} = feature;\n        let popContent = this.popContent(feature);\n        return L\n          .marker(latlng, {\n          icon: this.markerIcon(feature.properties.id, latlng)\n        })\n          .bindPopup(popContent);\n      }\n    }).addTo(this.refs.map.leafletElement);\n    this.addTileLayer();\n\n    let crumbs = this.state.crumbs;\n    crumbs.push(\"County\");\n    this.setState({crumbs: crumbs});\n    this.buildCrumbs();\n  }\n  zoomToFeature(feature, layer) {\n    this\n      .refs\n      .map\n      .leafletElement\n      .fitBounds(layer.getBounds());\n    this\n      .refs\n      .map\n      .leafletElement\n      .eachLayer(layer => {\n        this\n          .refs\n          .map\n          .leafletElement\n          .removeLayer(layer);\n      });\n    //console.log(feature)\n    if (this.state.defaultView === \"state\") {\n      this.addPointers();\n      this.setState({defaultView: \"county\"});\n    }\n    if (this.state.defaultView === \"country\") {\n      this.addStateMap(feature.properties.name);\n      this.setState({defaultView: \"state\"});\n    }\n    info.update(feature, \"county\");\n  }\n  onEachFeature(feature, layer) {\n    if (feature.properties.density != 0) {\n      layer.on({\n        mouseover: this\n          .highlightFeature\n          .bind(this, feature, layer, \"state\"),\n        mouseout: this\n          .resetHighlight\n          .bind(this, feature, layer, \"state\"),\n        click: this\n          .zoomToFeature\n          .bind(this, feature, layer, \"state\")\n      });\n    }\n  }\n  onEachStateFeature(feature, layer) {\n    if (feature.properties.density != 0) {\n      layer.on({\n        mouseover: this\n          .highlightFeature\n          .bind(this, feature, layer, \"county\"),\n        mouseout: this\n          .resetHighlight\n          .bind(this, feature, layer, \"county\")\n      });\n    }\n  }\n  addTileLayer() {\n    L\n      .tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {})\n      .addTo(this.refs.map.leafletElement);\n  }\n  buildCrumbs() {\n    let crumbList = \"\";\n    this\n      .state\n      .crumbs\n      .forEach((item, index) => {\n        if (index > 0) {\n          crumbList += ` > ${item}`;\n        } else {\n          crumbList += item;\n        }\n      });\n    this\n      .props\n      .breadCrumbs(crumbList);\n  }\n  infoControl() {\n    info.onAdd = function () {\n      this._div = L\n        .DomUtil\n        .create(\"div\", \"info\"); // create a div with a class \"info\"\n      this.update();\n      return this._div;\n    };\n\n    const v = this.state.defaultView;\n    // method that we will use to update the control based on feature properties\n    // passed\n    info.update = function (props, area = \"state\") {\n      console.log(props)\n      let header = area === \"state\" && v === \"country\"\n        ? \"<h4>Michigan Population Data by County</h4>\"\n        : \"<h4>Michigan Population Data by County</h4>\"\n      this._div.innerHTML = header + (props\n        ? \"<b>\" + props.name + \"</b><br />\" + props.density + \" population\"\n        : `Hover over a ${area}`);\n    }\n\n    info.addTo(this.refs.map.leafletElement);\n  }\n  displayReset(area = \"state\") {\n    var legend = L.control({position: \"topright\"});\n    var div = L\n      .DomUtil\n      .create(\"div\", \"reset_ntm\")\n    div.innerHTML += '<button>Reset </button>'\n    return div;\n  }\n  displayLegend(area) {\n    const times = area != \"state\"\n      ? 15\n      : 1;\n    const cls = \"info legend \" + area\n    var legend = L.control({position: \"bottomright\"});\n    legend.onAdd = () => {\n      var div = L\n          .DomUtil\n          .create(\"div\", cls),\n        grades = [\n          0 * times,\n          10 * times,\n          20 * times,\n          50 * times,\n          100 * times,\n          200 * times,\n          500 * times,\n          1000 * times\n        ],\n        labels = [];\n\n      // loop through our density intervals and generate a label with a colored square\n      // for each interval\n      for (var i = 0; i < grades.length; i++) {\n        div.innerHTML += '<i style=\"background:' + this.getColor(grades[i] + 1, area) + '\"></i> ' + grades[i] + (grades[i + 1]\n          ? \"&ndash;\" + grades[i + 1] + \"<br>\"\n          : \"+\");\n      }\n\n      return div;\n    };\n\n    legend.addTo(this.refs.map.leafletElement);\n  }\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n      <React.Fragment>\n        <div>\n          <Map center={position} zoom={this.state.zoom} zoomControl={false} ref=\"map\"/>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, {Component} from \"react\";\nimport MapView from \"./MapView\";\nimport ModalContent from \"./ModalContent\";\n\nclass CountyChart extends Component {\n  state = {\n    crumbsList: \"USA\",\n    show: false,\n    modalContent: \"\"\n  };\n  breadCrumbs(crumbs) {\n    this.setState({crumbsList: crumbs});\n  }\n  handleClose() {\n    this.setState({show: false, modalContent: \"\"});\n  }\n  handleShow = (modalContent, properties) => {\n    this.setState({\n      show: true,\n      modalContent: modalContent\n    }, () => {\n      //\n    });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <div class=\"row placeholders\">\n          <div class=\"col-xs-12 col-sm-12 placeholder insight-tab\">\n            <div className=\"leaflet-container\">\n              <MapView\n                handleShow={modalContent => this.handleShow(modalContent)}\n                breadCrumbs={crumbs => this.breadCrumbs(crumbs)}/>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CountyChart;\n","import React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Map, TileLayer, Marker, Popup, GeoJSON} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport GEOJSON from \"../dataSet/stateData.json\";\n// import michigan from \"../dataSet/mizip.json\"; import Select from\n// \"react-select\"; import $ from 'jquery'; import options from\n// \"../dataSet/us-states.json\";\nvar info = L.control();\nexport default class HeatMapView extends Component {\n  state = {\n    lat: 44.3,\n    lng: -80.6,\n    zoom: 7,\n    data: [],\n    stateData: [],\n    defaultView: \"country\",\n    crumbs: [\"USA\"],\n    show: false\n  };\n  componentDidMount() {\n    //this.addCountryMap(); this.addCountyMap();\n    this.addStateMap('michigan');\n    this.addTileLayer();\n  }\n\n  getColor(d, area) {\n    const times = area != \"state\"\n      ? 15\n      : 1;\n    return d > 1000 * times\n      ? \"#800026\"\n      : d > 500 * times\n        ? \"#BD0026\"\n        : d > 200 * times\n          ? \"#E31A1C\"\n          : d > 100 * times\n            ? \"#FC4E2A\"\n            : d > 50 * times\n              ? \"#FD8D3C\"\n              : d > 20 * times\n                ? \"#FEB24C\"\n                : d > 10 * times\n                  ? \"#FED976\"\n                  : \"#DDDDDD\";\n  }\n  style(feature, area = \"state\") {\n    return {\n      fillColor: this.getColor(feature.properties.density, area),\n      weight: 2,\n      opacity: 1,\n      color: \"white\",\n      dashArray: \"3\",\n      fillOpacity: 0.7\n    };\n  }\n  countyStyle(feature) {\n    return {weight: 1, opacity: 1, color: \"black\", dashArray: \"1\", fillOpacity: 0.3};\n  }\n  highlightFeature(feature, layer, area) {\n    //var layer = e.target;\n    this\n      .refs\n      .map\n      .leafletElement\n      .eachLayer(layer => {\n        //console.log(layer);\n      });\n    layer.setStyle({weight: 1, color: \"#666\", dashArray: \"\", fillOpacity: 0.7});\n    //console.log(layer.feature)\n    info.update(layer.feature.properties, area);\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n    }\n  }\n  resetHighlight(feature, layer, area) {\n    layer.setStyle({weight: 1, opacity: 1, color: \"white\", dashArray: \"1\", fillOpacity: 0.7});\n    info.update(layer.feature.properties, area);\n    //geojson.resetStyle(e.target);\n  }\n  addCountryMap() {\n    L.geoJSON(GEOJSON.features, {\n      onEachFeature: (feature, layer) => this.onEachFeature(feature, layer),\n      style: feature => this.style(feature)\n    }).addTo(this.refs.map.leafletElement);\n    this.infoControl();\n    this.displayLegend(\"state\");\n  }\n  addCountyMap() {\n    //L.geoJSON(uscounties.features).addTo(this.refs.map.leafletElement);\n  }\n  addStateMap(stateName) {\n    let updateState = [];\n    //this.displayReset()\n    const loc = window.location.hostname === \"localhost\"\n      ? \"http://localhost:5000\"\n      : \"\"\n    fetch(`${loc}/api/statePop`)\n      .then(res => res.json())\n      .then(res => {\n        let countyPop = res.population;\n        /*let state = michigan.features;\n        for (let i in state) {\n          const p = countyPop.filter(item => String(item.Zip) === state[i].properties.ZCTA5CE10).map(item => item.Population);\n          const pop = p[0] != undefined\n            ? this.convertToNum(p[0])\n            : 0;\n          state[i].properties.density = pop;\n          updateState.push(state[i]);\n        }*/\n        this.updatedStateFeatures(countyPop);\n        this.infoControl();\n        //$(\".state\").css(\"display\", \"none\")\n        this.displayLegend(\"county\");\n      })\n      .catch(error => console.error('Error:', error));\n\n  }\n  convertToNum(str) {\n    if (typeof(str) === \"number\") {\n      return str;\n    }\n    var n = str\n      .split(\",\")\n      .map(Number);\n    return parseInt(n.reduce((a, b) => a + b, ''));\n  }\n  updatedStateFeatures(data) {\n    console.log(data)\n    L.geoJSON(data, {\n      onEachFeature: (feature, layer) => this.onEachStateFeature(feature, layer),\n      style: feature => this.style(feature, \"county\")\n    }).addTo(this.refs.map.leafletElement);\n    this.addTileLayer();\n  }\n  markerIcon(content, latlng) {\n    return L.divIcon({className: \"my-div-icon\", html: String(content)});\n  }\n  localFunc() {\n    console.log(\"POP\");\n  }\n  popContent(props) {\n    const {properties} = props;\n    const t = modalContent => {\n      this\n        .props\n        .handleShow(modalContent);\n    };\n    L.thorsten = {};\n    L.thorsten.t = t;\n    const htmlStr = `<div class=\"container\">\n                        <div class=\"row pop-pad\">\n                            <h4>${properties.name}</h4>\n                            <div class=\"pop-address\">${properties.street}</div>\n                            <div class=\"pop-address\">${properties.city}, ${\n    properties.state}, ${properties.zip}</div>\n                        </div>\n                        <div class=\"row pop-address pop-pad\">\n                            <b>Flu Season</b>\n                            <select>\n                                <option>2018-2019</option>\n                                <option>2017-2018</option>\n                            </select>\n                        </div>\n                        <div class=\"row pop-address\">\n                            <a nohref onclick=\"L.thorsten.t('table')\">Table</a> | \n                            <a nohref onclick=\"L.thorsten.t('chart')\">Chart</a> | \n                            <a nohref onclick=\"L.thorsten.t('metrics')\">Metrics</a>| \n                            <a nohref onclick=\"L.thorsten.t('predict line')\">Predict Line</a>\n                        </div>\n                    </div>`;\n    return htmlStr;\n  }\n\n  zoomToFeature(feature, layer) {\n    this\n      .refs\n      .map\n      .leafletElement\n      .fitBounds(layer.getBounds());\n    this\n      .refs\n      .map\n      .leafletElement\n      .eachLayer(layer => {\n        this\n          .refs\n          .map\n          .leafletElement\n          .removeLayer(layer);\n      });\n    //console.log(feature)\n    if (this.state.defaultView === \"state\") {\n      this.addPointers();\n      this.setState({defaultView: \"county\"});\n    }\n    if (this.state.defaultView === \"country\") {\n      this.addStateMap(feature.properties.name);\n      this.setState({defaultView: \"state\"});\n    }\n    info.update(feature, \"county\");\n  }\n  onEachFeature(feature, layer) {\n    if (feature.properties.density != 0) {\n      layer.on({\n        mouseover: this\n          .highlightFeature\n          .bind(this, feature, layer, \"state\"),\n        mouseout: this\n          .resetHighlight\n          .bind(this, feature, layer, \"state\"),\n        click: this\n          .zoomToFeature\n          .bind(this, feature, layer, \"state\")\n      });\n    }\n  }\n  onEachStateFeature(feature, layer) {\n    if (feature.properties.density != 0) {\n      layer.on({\n        mouseover: this\n          .highlightFeature\n          .bind(this, feature, layer, \"county\"),\n        mouseout: this\n          .resetHighlight\n          .bind(this, feature, layer, \"county\")\n      });\n    }\n  }\n  addTileLayer() {\n    L\n      .tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {})\n      .addTo(this.refs.map.leafletElement);\n  }\n  buildCrumbs() {\n    let crumbList = \"\";\n    this\n      .state\n      .crumbs\n      .forEach((item, index) => {\n        if (index > 0) {\n          crumbList += ` > ${item}`;\n        } else {\n          crumbList += item;\n        }\n      });\n    this\n      .props\n      .breadCrumbs(crumbList);\n  }\n  infoControl() {\n    info.onAdd = function () {\n      this._div = L\n        .DomUtil\n        .create(\"div\", \"info\"); // create a div with a class \"info\"\n      this.update();\n      return this._div;\n    };\n\n    const v = this.state.defaultView;\n    // method that we will use to update the control based on feature properties\n    // passed\n    info.update = function (props, area = \"state\") {\n      console.log(props)\n      let header = area === \"state\" && v === \"country\"\n        ? \"<h4>Michigan Population Data by Zip Code</h4>\"\n        : \"<h4>Michigan Population Data by Zip Code</h4>\"\n      this._div.innerHTML = header + (props\n        ? \"<b>\" + props.ZCTA5CE10 + \"</b><br />\" + props.density + \" population\"\n        : `Hover over a Zip code area`);\n    }\n\n    info.addTo(this.refs.map.leafletElement);\n  }\n  displayReset(area = \"state\") {\n    var legend = L.control({position: \"topright\"});\n    var div = L\n      .DomUtil\n      .create(\"div\", \"reset_ntm\")\n    div.innerHTML += '<button>Reset </button>'\n    return div;\n  }\n  displayLegend(area) {\n    const times = area != \"state\"\n      ? 15\n      : 1;\n    const cls = \"info legend \" + area\n    var legend = L.control({position: \"bottomright\"});\n    legend.onAdd = () => {\n      var div = L\n          .DomUtil\n          .create(\"div\", cls),\n        grades = [\n          0 * times,\n          10 * times,\n          20 * times,\n          50 * times,\n          100 * times,\n          200 * times,\n          500 * times,\n          1000 * times\n        ],\n        labels = [];\n\n      // loop through our density intervals and generate a label with a colored square\n      // for each interval\n      for (var i = 0; i < grades.length; i++) {\n        div.innerHTML += '<i style=\"background:' + this.getColor(grades[i] + 1, area) + '\"></i> ' + grades[i] + (grades[i + 1]\n          ? \"&ndash;\" + grades[i + 1] + \"<br>\"\n          : \"+\");\n      }\n\n      return div;\n    };\n\n    legend.addTo(this.refs.map.leafletElement);\n  }\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n      <React.Fragment>\n        <div>\n          <Map center={position} zoom={this.state.zoom} ref=\"map\"/>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, {Component} from \"react\";\nimport HeatMapView from \"./HeatMapView\";\nimport ModalContent from \"./ModalContent\";\n\nclass StateChart extends Component {\n    state = {\n        crumbsList: \"USA\",\n        show: false,\n        modalContent: \"\"\n    };\n    breadCrumbs(crumbs) {\n        this.setState({crumbsList: crumbs});\n    }\n    handleClose() {\n        this.setState({show: false, modalContent: \"\"});\n    }\n    handleShow = (modalContent, properties) => {\n        this.setState({\n            show: true,\n            modalContent: modalContent\n        }, () => {\n            //\n        });\n    };\n    render() {\n        return (\n            <React.Fragment>\n                <div class=\"row placeholders\">\n                    <div class=\"col-xs-12 col-sm-12 placeholder insight-tab\">\n                        <div className=\"leaflet-container\">\n                            <HeatMapView\n                                handleShow={modalContent => this.handleShow(modalContent)}\n                                breadCrumbs={crumbs => this.breadCrumbs(crumbs)}/>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default StateChart;\n","import React from 'react';\nimport map from 'lodash.map';\nimport reduce from 'lodash.reduce';\nimport filter from 'lodash.filter';\nimport min from 'lodash.min';\nimport max from 'lodash.max';\nimport isNumber from 'lodash.isnumber';\nimport L from 'leaflet';\nimport {MapLayer, withLeaflet} from 'react-leaflet';\nimport simpleheat from 'simpleheat';\nimport PropTypes from 'prop-types';\n\nexport type LngLat = {\n    lng: number;\n    lat: number;\n}\n\nexport type Point = {\n    x: number;\n    y: number;\n}\n\nexport type Bounds = {\n    contains: (latLng : LngLat) => boolean;\n}\n\nexport type Pane = {\n    appendChild: (element : Object) => void;\n}\n\nexport type Panes = {\n    overlayPane: Pane;\n}\n\nexport type Map = {\n    layerPointToLatLng: (lngLat : Point) => LngLat;\n    latLngToLayerPoint: (lngLat : LngLat) => Point;\n    on: (event : string, handler : () => void) => void;\n    getBounds: () => Bounds;\n    getPanes: () => Panes;\n    invalidateSize: () => void;\n    options: Object;\n}\n\nexport type LeafletZoomEvent = {\n    zoom: number;\n    center: Object;\n}\n\nfunction isInvalid(num : number) : boolean {\n    return !isNumber(num) && !num;\n}\n\nfunction isValid(num : number) : boolean {\n    return !isInvalid(num);\n}\n\nfunction isValidLatLngArray(arr : Array < number >) : boolean {\n    return filter(arr, isValid).length === arr.length;\n}\n\nfunction isInvalidLatLngArray(arr : Array < number >) : boolean {\n    return !isValidLatLngArray(arr);\n}\n\nfunction safeRemoveLayer(leafletMap : Map, el) : void {\n    const {overlayPane} = leafletMap.getPanes();\n    if (overlayPane && overlayPane.contains(el)) {\n        overlayPane.removeChild(el);\n    }\n}\n\nfunction shouldIgnoreLocation(loc : LngLat) : boolean {\n    return isInvalid(loc.lng) || isInvalid(loc.lat);\n}\n\nexport default withLeaflet(class HeatmapLayer extends MapLayer {\n    static propTypes = {\n        points: PropTypes.array.isRequired,\n        longitudeExtractor: PropTypes.func.isRequired,\n        latitudeExtractor: PropTypes.func.isRequired,\n        intensityExtractor: PropTypes.func.isRequired,\n        fitBoundsOnLoad: PropTypes.bool,\n        fitBoundsOnUpdate: PropTypes.bool,\n        onStatsUpdate: PropTypes.func,\n        /* props controlling heatmap generation */\n        max: PropTypes.number,\n        radius: PropTypes.number,\n        maxZoom: PropTypes.number,\n        minOpacity: PropTypes.number,\n        blur: PropTypes.number,\n        gradient: PropTypes.object\n    };\n\n    createLeafletElement() {\n        return null;\n    }\n\n    componentDidMount() : void {\n        const canAnimate = this.props.leaflet.map.options.zoomAnimation && L.Browser.any3d;\n        const zoomClass = `leaflet-zoom-${canAnimate\n            ? 'animated'\n            : 'hide'}`;\n        const mapSize = this\n            .props\n            .leaflet\n            .map\n            .getSize();\n        const transformProp = L\n            .DomUtil\n            .testProp(['transformOrigin', 'WebkitTransformOrigin', 'msTransformOrigin']);\n\n        this._el = L\n            .DomUtil\n            .create('canvas', zoomClass);\n        this._el.style[transformProp] = '50% 50%';\n        this._el.width = mapSize.x;\n        this._el.height = mapSize.y;\n\n        const el = this._el;\n\n        const Heatmap = L\n            .Layer\n            .extend({\n                onAdd: (leafletMap) => leafletMap\n                    .getPanes()\n                    .overlayPane\n                    .appendChild(el),\n                addTo: (leafletMap) => {\n                    leafletMap.addLayer(this);\n                    return this;\n                },\n                onRemove: (leafletMap) => safeRemoveLayer(leafletMap, el)\n            });\n\n        this.leafletElement = new Heatmap();\n        super.componentDidMount();\n        this._heatmap = simpleheat(this._el);\n        this.reset();\n\n        if (this.props.fitBoundsOnLoad) {\n            this.fitBounds();\n        }\n        this.attachEvents();\n        this.updateHeatmapProps(this.getHeatmapProps(this.props));\n    }\n\n    getMax(props) {\n        return props.max || 3.0;\n    }\n\n    getRadius(props) {\n        return props.radius || 30;\n    }\n\n    getMaxZoom(props) {\n        return props.maxZoom || 18;\n    }\n\n    getMinOpacity(props) {\n        return props.minOpacity || 0.01;\n    }\n\n    getBlur(props) {\n        return props.blur || 15;\n    }\n\n    getHeatmapProps(props) {\n        return {\n            minOpacity: this.getMinOpacity(props),\n            maxZoom: this.getMaxZoom(props),\n            radius: this.getRadius(props),\n            blur: this.getBlur(props),\n            max: this.getMax(props),\n            gradient: props.gradient\n        };\n    }\n\n    componentWillReceiveProps(nextProps : Object) : void {\n        const currentProps = this.props;\n        const nextHeatmapProps = this.getHeatmapProps(nextProps);\n\n        this.updateHeatmapGradient(nextHeatmapProps.gradient);\n\n        const hasRadiusUpdated = nextHeatmapProps.radius !== currentProps.radius;\n        const hasBlurUpdated = nextHeatmapProps.blur !== currentProps.blur;\n\n        if (hasRadiusUpdated || hasBlurUpdated) {\n            this.updateHeatmapRadius(nextHeatmapProps.radius, nextHeatmapProps.blur);\n        }\n\n        if (nextHeatmapProps.max !== currentProps.max) {\n            this.updateHeatmapMax(nextHeatmapProps.max);\n        }\n\n    }\n\n    /**\n   * Update various heatmap properties like radius, gradient, and max\n   */\n    updateHeatmapProps(props : Object) {\n        this.updateHeatmapRadius(props.radius, props.blur);\n        this.updateHeatmapGradient(props.gradient);\n        this.updateHeatmapMax(props.max);\n    }\n\n    /**\n   * Update the heatmap's radius and blur (blur is optional)\n   */\n    updateHeatmapRadius(radius : number, blur :\n        ? number) : void {\n        if(radius) {\n            this\n                ._heatmap\n                .radius(radius, blur);\n        }\n    }\n\n    /**\n   * Update the heatmap's gradient\n   */\n    updateHeatmapGradient(gradient : Object) : void {\n        if(gradient) {\n            this\n                ._heatmap\n                .gradient(gradient);\n        }\n    }\n\n    /**\n   * Update the heatmap's maximum\n   */\n    updateHeatmapMax(maximum : number) : void {\n        if(maximum) {\n            this\n                ._heatmap\n                .max(maximum);\n        }\n    }\n\n    componentWillUnmount() : void {\n        safeRemoveLayer(this.props.leaflet.map, this._el);\n    }\n\n    fitBounds() : void {\n        const points = this.props.points;\n        const lngs = map(points, this.props.longitudeExtractor);\n        const lats = map(points, this.props.latitudeExtractor);\n        const ne = {\n            lng: max(lngs),\n            lat: max(lats)\n        };\n        const sw = {\n            lng: min(lngs),\n            lat: min(lats)\n        };\n\n        if (shouldIgnoreLocation(ne) || shouldIgnoreLocation(sw)) {\n            return;\n        }\n\n        this\n            .props\n            .leaflet\n            .map\n            .fitBounds(L.latLngBounds(L.latLng(sw), L.latLng(ne)));\n    }\n\n    componentDidUpdate() : void {\n        this\n            .props\n            .leaflet\n            .map\n            .invalidateSize();\n        if (this.props.fitBoundsOnUpdate) {\n            this.fitBounds();\n        }\n        this.reset();\n    }\n\n    shouldComponentUpdate() : boolean {return true;}\n\n    attachEvents() : void {\n        const leafletMap: Map = this.props.leaflet.map;\n        leafletMap.on('viewreset', () => this.reset());\n        leafletMap.on('moveend', () => this.reset());\n        if (leafletMap.options.zoomAnimation && L.Browser.any3d) {\n            leafletMap.on('zoomanim', this._animateZoom, this);\n        }\n    }\n\n    _animateZoom(e : LeafletZoomEvent) : void {\n        const scale = this\n            .props\n            .leaflet\n            .map\n            .getZoomScale(e.zoom);\n        const offset = this\n            .props\n            .leaflet\n            .map\n            ._getCenterOffset(e.center)\n            ._multiplyBy(-scale)\n            .subtract(this.props.leaflet.map._getMapPanePos());\n\n        if (L.DomUtil.setTransform) {\n            L\n                .DomUtil\n                .setTransform(this._el, offset, scale);\n        } else {\n            this._el.style[L.DomUtil.TRANSFORM] = `${L\n                .DomUtil\n                .getTranslateString(offset)} scale(${scale})`;\n        }\n    }\n\n    reset() : void {\n        const topLeft = this\n            .props\n            .leaflet\n            .map\n            .containerPointToLayerPoint([0, 0]);\n        L\n            .DomUtil\n            .setPosition(this._el, topLeft);\n\n        const size = this\n            .props\n            .leaflet\n            .map\n            .getSize();\n\n        if (this._heatmap._width !== size.x) {\n            this._el.width = this._heatmap._width = size.x;\n        }\n        if (this._heatmap._height !== size.y) {\n            this._el.height = this._heatmap._height = size.y;\n        }\n\n        if (this._heatmap && !this._frame && !this.props.leaflet.map._animating) {\n            this._frame = L\n                .Util\n                .requestAnimFrame(this.redraw, this);\n        }\n\n        this.redraw();\n    }\n\n    redraw() : void {\n        const r = this._heatmap._r;\n        const size = this\n            .props\n            .leaflet\n            .map\n            .getSize();\n\n        const maxIntensity = this.props.max === undefined\n            ? 1\n            : this.getMax(this.props);\n\n        const maxZoom = this.props.maxZoom === undefined\n            ? this\n                .props\n                .leaflet\n                .map\n                .getMaxZoom()\n            : this.getMaxZoom(this.props);\n\n        const v = 1 / Math.pow(2, Math.max(0, Math.min(maxZoom - this.props.leaflet.map.getZoom(), 12)) / 2);\n\n        const cellSize = r / 2;\n        const panePos = this\n            .props\n            .leaflet\n            .map\n            ._getMapPanePos();\n        const offsetX = panePos.x % cellSize;\n        const offsetY = panePos.y % cellSize;\n        const getLat = this.props.latitudeExtractor;\n        const getLng = this.props.longitudeExtractor;\n        const getIntensity = this.props.intensityExtractor;\n\n        const inBounds = (p, bounds) => bounds.contains(p);\n\n        const filterUndefined = (row) => filter(row, c => c !== undefined);\n\n        const roundResults = (results) => reduce(results, (result, row) => map(filterUndefined(row), (cell) => [\n            Math.round(cell[0]),\n            Math.round(cell[1]),\n            Math.min(cell[2], maxIntensity),\n            cell[3]\n        ]).concat(result), []);\n\n        const accumulateInGrid = (points, leafletMap, bounds) => reduce(points, (grid, point) => {\n            const latLng = [getLat(point), getLng(point)];\n            if (isInvalidLatLngArray(latLng)) { //skip invalid points\n                return grid;\n            }\n\n            const p = leafletMap.latLngToContainerPoint(latLng);\n\n            if (!inBounds(p, bounds)) {\n                return grid;\n            }\n\n            const x = Math.floor((p.x - offsetX) / cellSize) + 2;\n            const y = Math.floor((p.y - offsetY) / cellSize) + 2;\n\n            grid[y] = grid[y] || [];\n            const cell = grid[y][x];\n\n            const alt = getIntensity(point);\n            const k = alt * v;\n\n            if (!cell) {\n                grid[y][x] = [p.x, p.y, k, 1];\n            } else {\n                cell[0] = (cell[0] * cell[2] + p.x * k) / (cell[2] + k); // x\n                cell[1] = (cell[1] * cell[2] + p.y * k) / (cell[2] + k); // y\n                cell[2] += k; // accumulated intensity value\n                cell[3] += 1;\n            }\n\n            return grid;\n        }, []);\n\n        const getBounds = () => new L.Bounds(L.point([-r, -r\n        ]), size.add([r, r]));\n\n        const getDataForHeatmap = (points, leafletMap) => roundResults(accumulateInGrid(points, leafletMap, getBounds(leafletMap)));\n\n        const data = getDataForHeatmap(this.props.points, this.props.leaflet.map);\n\n        this\n            ._heatmap\n            .clear();\n        this\n            ._heatmap\n            .data(data)\n            .draw(this.getMinOpacity(this.props));\n\n        this._frame = null;\n\n        if (this.props.onStatsUpdate && this.props.points && this.props.points.length > 0) {\n            this\n                .props\n                .onStatsUpdate(reduce(data, (stats, point) => {\n                    stats.max = point[3] > stats.max\n                        ? point[3]\n                        : stats.max;\n                    stats.min = point[3] < stats.min\n                        ? point[3]\n                        : stats.min;\n                    return stats;\n                }, {\n                    min: Infinity,\n                    max: -Infinity\n                }));\n        }\n    }\n\n    render() : React.Element {return null;}\n\n});","import React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n    Map,\n    TileLayer,\n    Marker,\n    Popup,\n    GeoJSON,\n    FeatureGroup,\n    LayersControl\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport GEOJSON from \"../dataSet/stateData.json\";\nimport michigan from \"../dataSet/michigan.json\";\nimport stores from \"../dataSet/stores.json\";\nimport HeatmapLayer from '../utils/HeatmapLayer';\n\nvar info = L.control();\nexport default class TrendMapView extends Component {\n    state = {\n        lat: 42.3,\n        lng: -85.6,\n        zoom: 7,\n        data: [],\n        stateData: [],\n        defaultView: \"country\",\n        crumbs: [\"USA\"],\n        show: false\n    };\n    componentDidMount() {\n        //this.addPointers();\n        this.addTileLayer();\n    }\n\n    getColor(d) {\n        return d > 1000\n            ? \"#800026\"\n            : d > 500\n                ? \"#BD0026\"\n                : d > 200\n                    ? \"#E31A1C\"\n                    : d > 100\n                        ? \"#FC4E2A\"\n                        : d > 50\n                            ? \"#FD8D3C\"\n                            : d > 20\n                                ? \"#FEB24C\"\n                                : d > 10\n                                    ? \"#FED976\"\n                                    : \"#FFEDA0\";\n    }\n    style(feature) {\n        return {\n            fillColor: this.getColor(feature.properties.density),\n            weight: 2,\n            opacity: 1,\n            color: \"white\",\n            dashArray: \"3\",\n            fillOpacity: 0.7\n        };\n    }\n    countyStyle(feature) {\n        return {weight: 1, opacity: 1, color: \"black\", dashArray: \"2\", fillOpacity: 0.3};\n    }\n    highlightFeature(feature, layer) {\n        //var layer = e.target;\n        this\n            .refs\n            .map\n            .leafletElement\n            .eachLayer(layer => {\n                //console.log(layer);\n            });\n        layer.setStyle({weight: 5, color: \"#666\", dashArray: \"\", fillOpacity: 0.7});\n        info.update(layer.feature.properties);\n        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n            layer.bringToFront();\n        }\n    }\n    resetHighlight(feature, layer) {\n        layer.setStyle({weight: 2, opacity: 1, color: \"white\", dashArray: \"3\", fillOpacity: 0.7});\n        info.update();\n        //geojson.resetStyle(e.target);\n    }\n    addCountryMap() {\n        L.geoJSON(GEOJSON.features, {\n            onEachFeature: (feature, layer) => this.onEachFeature(feature, layer),\n            style: feature => this.style(feature)\n        }).addTo(this.refs.map.leafletElement);\n    }\n    addCountyMap() {\n        //L.geoJSON(uscounties.features).addTo(this.refs.map.leafletElement);\n    }\n    addStateMap(stateName) {\n        const _stateName = stateName.toLowerCase();\n        console.log(_stateName)\n        L.geoJSON(michigan.features, {\n            onEachFeature: (feature, layer) => this.onEachStateFeature(feature, layer)\n        }).addTo(this.refs.map.leafletElement);\n        this.addTileLayer();\n    }\n    markerIcon(content, latlng) {\n        return L.divIcon({className: \"my-div-icon\", html: String(content)});\n    }\n    localFunc() {\n        console.log(\"POP\");\n    }\n    popContent(props) {\n        const {properties} = props;\n        const t = modalContent => {\n            this\n                .props\n                .handleShow(modalContent);\n        };\n        L.thorsten = {};\n        L.thorsten.t = t;\n        const htmlStr = `<div class=\"container\">\n                            <div class=\"row pop-pad\">\n                                <h4>${properties.name}</h4>\n                                <div class=\"pop-address\">${properties.street}</div>\n                                <div class=\"pop-address\">${properties.city}, ${\n        properties.state}, ${properties.zip}</div>\n                            </div>\n                            <div class=\"row pop-address pop-pad\">\n                                <b>Flu Season</b>\n                                <select>\n                                    <option>2018-2019</option>\n                                    <option>2017-2018</option>\n                                </select>\n                            </div>\n                            <div class=\"row pop-address\">\n                                <a nohref onclick=\"L.thorsten.t('table')\">Table</a> | \n                                <a nohref onclick=\"L.thorsten.t('chart')\">Chart</a> | \n                                <a nohref onclick=\"L.thorsten.t('metrics')\">Metrics</a>| \n                                <a nohref onclick=\"L.thorsten.t('predict line')\">Predict Line</a>\n                            </div>\n                        </div>`;\n        return htmlStr;\n    }\n    addPointers() {\n        L.geoJSON(stores.features, {\n            pointToLayer: (feature, latlng) => {\n                const {properties} = feature;\n                let popContent = this.popContent(feature);\n                return L\n                    .marker(latlng, {\n                    icon: this.markerIcon(feature.properties.id, latlng)\n                })\n                    .bindPopup(popContent);\n            }\n        }).addTo(this.refs.map.leafletElement);\n        this.addTileLayer();\n    }\n    zoomToFeature(feature, layer) {\n        this\n            .refs\n            .map\n            .leafletElement\n            .fitBounds(layer.getBounds());\n        this\n            .refs\n            .map\n            .leafletElement\n            .eachLayer(layer => {\n                this\n                    .refs\n                    .map\n                    .leafletElement\n                    .removeLayer(layer);\n            });\n        //console.log(feature)\n        if (this.state.defaultView === \"state\") {\n            this.addPointers();\n            this.setState({defaultView: \"county\"});\n        }\n        if (this.state.defaultView === \"country\") {\n            this.addStateMap(feature.properties.name);\n            this.setState({defaultView: \"state\"});\n        }\n    }\n    onEachFeature(feature, layer) {\n        layer.on({\n            mouseover: this\n                .highlightFeature\n                .bind(this, feature, layer),\n            mouseout: this\n                .resetHighlight\n                .bind(this, feature, layer),\n            click: this\n                .zoomToFeature\n                .bind(this, feature, layer)\n        });\n    }\n    onEachStateFeature(feature, layer) {\n        layer.on({\n            click: this\n                .zoomToFeature\n                .bind(this, feature, layer)\n        });\n    }\n    addTileLayer() {\n        L\n            .tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {})\n            .addTo(this.refs.map.leafletElement);\n    }\n\n    render() {\n        const position = [this.state.lat, this.state.lng];\n        const gradient = {\n            0.1: '#89BDE0',\n            0.2: '#96E3E6',\n            0.4: '#82CEB6',\n            0.6: '#FAF3A5',\n            0.8: '#F5D98B',\n            '1.0': '#DE9A96'\n        };\n        const addressPoints = [\n            [\n                42.347021, -83.060184, \"0\"\n            ],\n            [\n                42.347021, -83.060184, \"100\"\n            ],\n            [\n                42.347021, -83.060184, \"200\"\n            ],\n            [\n                42.347021, -83.060184, \"500\"\n            ],\n            [\n                42.349600, -83.018847, \"0\"\n            ],\n            [\n                42.349600, -83.018847, \"500\"\n            ],\n            [\n                42.349600, -83.018847, \"1000\"\n            ],\n            [\n                42.349600, -83.018847, \"2000\"\n            ],\n            [\n                42.97550, -82.42430, \"0\"\n            ],\n            [\n                42.97550, -82.42430, \"100\"\n            ],\n            [\n                42.97550, -82.42430, \"100\"\n            ],\n            [42.97550, -82.42430, \"0\"]\n        ]\n        return (\n            <React.Fragment>\n                <div>\n                    <Map center={position} zoom={this.state.zoom} ref=\"map\">\n                        <HeatmapLayer\n                            fitBoundsOnLoad\n                            fitBoundsOnUpdate\n                            points={addressPoints}\n                            longitudeExtractor={m => m[1]}\n                            latitudeExtractor={m => m[0]}\n                            intensityExtractor={m => parseFloat(m[2])}/>\n                    </Map>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport TrendMapView from \"./TrendMapView\";\nimport ModalContent from \"./ModalContent\";\n\nclass FluTrendChart extends Component {\n    state = {\n        crumbsList: \"USA\",\n        show: false,\n        modalContent: \"\"\n    };\n    breadCrumbs(crumbs) {\n        this.setState({crumbsList: crumbs});\n    }\n    handleClose() {\n        this.setState({show: false, modalContent: \"\"});\n    }\n    handleShow = (modalContent, properties) => {\n        this.setState({\n            show: true,\n            modalContent: modalContent\n        }, () => {\n            //\n        });\n    };\n    render() {\n        return (\n            <React.Fragment>\n                <div class=\"row placeholders\">\n                    <div class=\"col-xs-12 col-sm-12 placeholder insight-tab\">\n                        <div className=\"leaflet-container\">\n                            <TrendMapView/>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default FluTrendChart;\n","import React, {Component} from 'react';\nimport {BrowserRouter, Route, NavLink} from 'react-router-dom';\nimport {PageHeader} from '../utils/Common';\nimport SupplyChain from './SupplyChain';\nimport CountyChart from './CountyChart';\nimport StateChart from './StateChart';\nimport FluTrendChart from './FluTrendChart';\nclass MarketingAnalytics extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this\n            .toggle\n            .bind(this);\n        this.state = {\n            activeTab: '1'\n        };\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.setState({activeTab: tab});\n        }\n    }\n    render() {\n        const {match} = this.props;\n        return (\n            <React.Fragment>\n                <PageHeader header=\"Marketing Analytics\"/>\n                <div className=\"row placeholders\">\n                    <div className=\"col-xs-12 col-sm-12 placeholder\">\n                        <ul className=\"nav nav-pills\">\n                            <li className=\"nav-item\">\n                                <NavLink\n                                    exact\n                                    activeClassName=\"active\"\n                                    className=\"nav-link \"\n                                    to={`${match.path}`}>Flu Vaccine Demand Model</NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink\n                                    activeClassName=\"active\"\n                                    className=\"nav-link\"\n                                    to={`${match.path}/mkt-insights`}>Marketing Insights</NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink\n                                    activeClassName=\"active\"\n                                    className=\"nav-link\"\n                                    to={`${match.path}/county-view`}>County View</NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink\n                                    activeClassName=\"active\"\n                                    className=\"nav-link\"\n                                    to={`${match.path}/zip-view`}>Zip Code View</NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink\n                                    activeClassName=\"active\"\n                                    className=\"nav-link\"\n                                    to={`${match.path}/flu-trend`}>Flu Trend</NavLink>\n                            </li>\n                        </ul>\n                        <Route\n                            exact\n                            path={`${match.path}`}\n                            render={() => <div>Data Not available</div>}/>\n\n                        <Route path={`${match.path}/mkt-insights`} component={SupplyChain}/>\n                        <Route exact path={`${match.path}/county-view`} component={CountyChart}/>\n                        <Route exact path={`${match.path}/zip-view`} component={StateChart}/>\n                        <Route exact path={`${match.path}/flu-trend`} component={FluTrendChart}/>\n\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default MarketingAnalytics;\n","import React from 'react';\nimport {Table} from 'reactstrap';\n\nclass ModalTable extends React.Component {\n    render() {\n        const {data} = this.props;\n        return (\n            <Table striped bordered condensed hover>\n                <thead>\n                    <tr>\n                        {Object\n                            .keys(data[0])\n                            .map((item, index) => <th key={index}>{item}</th>)\n}\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map((item, index) => {\n                        return (\n                            <tr key={index}>\n                                {Object\n                                    .values(item)\n                                    .map((item, index) => {\n                                        return (\n                                            <td key={index}>{item}</td>\n                                        )\n                                    })\n}\n                            </tr>\n                        )\n                    })\n}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default ModalTable;","import React from \"react\";\nimport { Media } from \"reactstrap\";\nimport img from \"../images/unamed3.png\";\nclass ModalChart extends React.Component {\n  render() {\n    return (\n      <div>\n        <img\n          object\n          src={img}\n          style={{\n            width: \"100%\",\n            height: \"auto\"\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ModalChart;\n","import React from 'react';\nimport ReactHighcharts from 'react-highcharts';\nimport predict from '../dataSet/predict.json'\n\nclass ModalHighChart extends React.Component {\n    render() {\n        const WEEK_TEMP = predict\n            .filter(item => item.WEEK_TEMP)\n            .map(item => item.WEEK_TEMP);\n\n        const TEMP_PREDICTION = predict\n            .filter(item => item.TEMP_PREDICTION)\n            .map(item => item.TEMP_PREDICTION);\n\n        const ACTIVITY_PREDICTION = predict\n            .filter(item => item.ACTIVITY_PREDICTION)\n            .map(item => item.ACTIVITY_PREDICTION);\n\n        const config = {\n            title: {\n                text: ''\n            },\n            yAxis: [\n                { // Primary yAxis\n                    labels: {\n                        format: '{value}°C'\n                    },\n                    title: {\n                        text: 'Temperature'\n                    }\n\n                }, {\n                    labels: {\n                        format: 'Int'\n                    },\n                    title: {\n                        text: 'Activity'\n                    },\n                    opposite: true\n\n                }\n            ],\n            legend: {\n                layout: 'vertical',\n                align: 'right',\n                verticalAlign: 'middle'\n            },\n\n            plotOptions: {\n                series: {\n                    label: {\n                        connectorAllowed: false\n                    },\n                    pointStart: 35\n                }\n            },\n\n            series: [\n                {\n                    name: 'Weekly Temperature',\n                    data: WEEK_TEMP\n                }, {\n                    name: 'Temperature Prediction',\n                    data: TEMP_PREDICTION\n                }, {\n                    name: 'Activity Prediction',\n                    data: ACTIVITY_PREDICTION\n                }\n            ],\n\n            responsive: {\n                rules: [\n                    {\n                        condition: {\n                            maxWidth: 500\n                        },\n                        chartOptions: {\n                            legend: {\n                                layout: 'horizontal',\n                                align: 'center',\n                                verticalAlign: 'bottom'\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n        return (\n            <div><ReactHighcharts config={config}/></div>\n        )\n    }\n}\n\nexport default ModalHighChart;","import React from 'react';\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\nimport ModalTable from './ModalTable';\nimport ModalChart from './ModalChart';\nimport ModalHighChart from './ModalHighChart';\nimport csvjson from '../dataSet/csvjson.json';\nimport metrics from '../dataSet/metrics.json';\nclass ModalContent extends React.Component {\n\n    render() {\n        const {contentType} = this.props;\n        return (\n            <React.Fragment>\n                <ModalHeader >\n                    {contentType.toUpperCase()}\n                </ModalHeader>\n                <ModalBody>\n                    {contentType === 'table'\n                        ? <div className=\"modal-table\"><ModalTable data={csvjson}/></div>\n                        : contentType === 'chart'\n                            ? <div><ModalChart/></div>\n                            : contentType === 'metrics'\n                                ? <div className=\"modal-table\"><ModalTable data={metrics}/></div>\n                                : contentType === 'predict line'\n                                    ? <div><ModalHighChart/></div>\n                                    : \"\"\n}\n                </ModalBody>\n                <ModalFooter></ModalFooter>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default ModalContent;","module.exports = __webpack_public_path__ + \"static/media/unamed3.5611b10f.png\";"],"sourceRoot":""}