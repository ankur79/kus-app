{"version":3,"sources":["components/StoreMapView.js","components/MarketingAnalyst.js","components/ModalTable.js","components/ModalChart.js","components/ModalHighChart.js","components/ModalContent.js","images/unnamed.png"],"names":["info","L","control","geojsn","StoreMapView","state","lat","lng","zoom","data","stateData","defaultView","crumbs","show","this","addPointers","addTileLayer","d","feature","fillColor","getColor","properties","density","weight","opacity","color","dashArray","fillOpacity","layer","refs","map","leafletElement","eachLayer","setStyle","update","Browser","ie","opera","edge","bringToFront","content","latlng","divIcon","className","html","String","id","openPopup","props","_this2","thorsten","t","modalContent","handleShow","concat","name","street","city","zip","_this3","geoJSON","stores","features","pointToLayer","popContent","marker","icon","markerIcon","bindPopup","addTo","_this4","fitBounds","getBounds","removeLayer","setState","on","mouseover","highlightFeature","bind","mouseout","resetHighlight","click","zoomToFeature","tileLayer","crumbList","forEach","item","index","breadCrumbs","onAdd","_div","DomUtil","create","innerHTML","_this5","legend","position","div","grades","i","length","_this6","react_default","a","createElement","Fragment","style","display","key","onClick","openPop","phone","Map","center","ref","Component","MarketingAnalyst","crumbsList","_this","console","log","reactstrap_es","isOpen","toggle","handleClose","ModalContent","contentType","Common","header","StoreMapView_StoreMapView","ModalTable","striped","bordered","condensed","hover","Object","keys","values","React","ModalChart","object","src","img","width","height","ModalHighChart","config","title","text","yAxis","labels","format","opposite","layout","align","verticalAlign","plotOptions","series","label","connectorAllowed","pointStart","predict","filter","WEEK_TEMP","TEMP_PREDICTION","ACTIVITY_PREDICTION","responsive","rules","condition","maxWidth","chartOptions","ReactHighcharts_default","toUpperCase","components_ModalTable","csvjson","components_ModalChart","metrics","components_ModalHighChart","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/8.975238cb.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Map} from \"react-leaflet\";\nimport L from \"leaflet\";\nvar info = L.control();\nvar geojsn = []\nexport default class StoreMapView extends Component {\n    state = {\n        lat: 42.3,\n        lng: -83.0,\n        zoom: 9,\n        data: [],\n        stateData: [],\n        defaultView: \"country\",\n        crumbs: [\"USA\"],\n        show: false\n    };\n\n    componentDidMount() {\n        this.addPointers();\n        this.addTileLayer();\n    }\n\n    getColor(d) {\n        return d > 1000\n            ? \"#800026\"\n            : d > 500\n                ? \"#BD0026\"\n                : d > 200\n                    ? \"#E31A1C\"\n                    : d > 100\n                        ? \"#FC4E2A\"\n                        : d > 50\n                            ? \"#FD8D3C\"\n                            : d > 20\n                                ? \"#FEB24C\"\n                                : d > 10\n                                    ? \"#FED976\"\n                                    : \"#FFEDA0\";\n    }\n    style(feature) {\n        return {\n            fillColor: this.getColor(feature.properties.density),\n            weight: 2,\n            opacity: 1,\n            color: \"white\",\n            dashArray: \"3\",\n            fillOpacity: 0.7\n        };\n    }\n    countyStyle(feature) {\n        return {weight: 1, opacity: 1, color: \"black\", dashArray: \"2\", fillOpacity: 0.3};\n    }\n    highlightFeature(feature, layer) {\n        //var layer = e.target;\n        this\n            .refs\n            .map\n            .leafletElement\n            .eachLayer(layer => {\n                //console.log(layer);\n            });\n        layer.setStyle({weight: 5, color: \"#666\", dashArray: \"\", fillOpacity: 0.7});\n        info.update(layer.feature.properties);\n        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n            layer.bringToFront();\n        }\n    }\n    resetHighlight(feature, layer) {\n        layer.setStyle({weight: 2, opacity: 1, color: \"white\", dashArray: \"3\", fillOpacity: 0.7});\n        info.update();\n        //geojson.resetStyle(e.target);\n    }\n    markerIcon(content, latlng) {\n        return L.divIcon({className: \"my-div-icon\", html: String(content)});\n    }\n    openPop(id) {\n        geojsn\n            .eachLayer(function (feature) {\n                if (feature.feature.properties.id == id) {\n                    feature.openPopup();\n                }\n            });\n    }\n    popContent(props) {\n        const {properties} = props;\n        const t = modalContent => {\n            this\n                .props\n                .handleShow(modalContent);\n        };\n        L.thorsten = {};\n        L.thorsten.t = t;\n        const htmlStr = `<div class=\"container\">\n                            <div class=\"row pop-pad\">\n                                <h4>${properties.name}</h4>\n                                <div class=\"pop-address\">${properties.street}</div>\n                                <div class=\"pop-address\">${properties.city}, ${\n        properties.state}, ${properties.zip}</div>\n                            </div>\n                            <div class=\"row pop-address pop-pad\">\n                                <b>Flu Season</b>\n                                <select>\n                                    <option>2018-2019</option>\n                                    <option>2017-2018</option>\n                                </select>\n                            </div>\n                            <div class=\"row pop-address\">\n                                <a nohref onclick=\"L.thorsten.t('table')\">Table</a> \n                                <a nohref onclick=\"L.thorsten.t('chart')\">Chart</a> \n                                <a nohref onclick=\"L.thorsten.t('metrics')\">Metrics</a>\n                                <a nohref onclick=\"L.thorsten.t('predict line')\">Predict Line</a>\n                            </div>\n                        </div>`;\n        return htmlStr;\n    }\n    addPointers() {\n        geojsn = L.geoJSON(this.props.stores.features, {\n            pointToLayer: (feature, latlng) => {\n                const {properties} = feature;\n                let popContent = this.popContent(feature);\n                return L\n                    .marker(latlng, {\n                    icon: this.markerIcon(feature.properties.id, latlng)\n                })\n                    .bindPopup(popContent);\n            }\n        }).addTo(this.refs.map.leafletElement);\n        this.addTileLayer();\n    }\n    zoomToFeature(feature, layer) {\n        this\n            .refs\n            .map\n            .leafletElement\n            .fitBounds(layer.getBounds());\n        this\n            .refs\n            .map\n            .leafletElement\n            .eachLayer(layer => {\n                this\n                    .refs\n                    .map\n                    .leafletElement\n                    .removeLayer(layer);\n            });\n        //console.log(feature)\n        if (this.state.defaultView === \"state\") {\n            this.addPointers();\n            this.setState({defaultView: \"county\"});\n        }\n    }\n    onEachFeature(feature, layer) {\n        layer.on({\n            mouseover: this\n                .highlightFeature\n                .bind(this, feature, layer),\n            mouseout: this\n                .resetHighlight\n                .bind(this, feature, layer),\n            click: this\n                .zoomToFeature\n                .bind(this, feature, layer)\n        });\n    }\n    onEachStateFeature(feature, layer) {\n        layer.on({\n            click: this\n                .zoomToFeature\n                .bind(this, feature, layer)\n        });\n    }\n    addTileLayer() {\n        L\n            .tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {})\n            .addTo(this.refs.map.leafletElement);\n    }\n    buildCrumbs() {\n        let crumbList = \"\";\n        this\n            .state\n            .crumbs\n            .forEach((item, index) => {\n                if (index > 0) {\n                    crumbList += ` > ${item}`;\n                } else {\n                    crumbList += item;\n                }\n            });\n        this\n            .props\n            .breadCrumbs(crumbList);\n    }\n    infoControl() {\n        info.onAdd = function () {\n            this._div = L\n                .DomUtil\n                .create(\"div\", \"info\"); // create a div with a class \"info\"\n            this.update();\n            return this._div;\n        };\n\n        // method that we will use to update the control based on feature properties\n        // passed\n        info.update = function (props) {\n            this._div.innerHTML = \"<h4>US Flu Data</h4>\" + (props\n                ? \"<b>\" + props.name + \"</b><br />\" + props.density + \" flu cases\"\n                : \"Hover over a state\");\n        };\n\n        info.addTo(this.refs.map.leafletElement);\n    }\n    displayLegend() {\n        var legend = L.control({position: \"bottomright\"});\n\n        legend.onAdd = () => {\n            var div = L\n                    .DomUtil\n                    .create(\"div\", \"info legend\"),\n                grades = [\n                    0,\n                    10,\n                    20,\n                    50,\n                    100,\n                    200,\n                    500,\n                    1000\n                ],\n                labels = [];\n\n            // loop through our density intervals and generate a label with a colored square\n            // for each interval\n            for (var i = 0; i < grades.length; i++) {\n                div.innerHTML += '<i style=\"background:' + this.getColor(grades[i] + 1) + '\"></i> ' + grades[i] + (grades[i + 1]\n                    ? \"&ndash;\" + grades[i + 1] + \"<br>\"\n                    : \"+\");\n            }\n\n            return div;\n        };\n\n        legend.addTo(this.refs.map.leafletElement);\n    }\n    render() {\n        const position = [this.state.lat, this.state.lng];\n        return (\n            <React.Fragment>\n                <div style={{\n                    display: \"flex\"\n                }}>\n                    <div className=\"col-xs-4 col-sm-4 pr-0 pl-0\">\n                        {this\n                            .props\n                            .stores\n                            .features\n                            .map((item) => <li\n                                key={item.properties.id}\n                                onClick={() => this.openPop(item.properties.id)}\n                                className=\"addrs-list\">\n                                <div\n                                    style={{\n                                    display: \"flex\"\n                                }}>\n                                    <div className=\"my-div-icon\">{item.properties.id}</div>\n                                    <div className=\"mt-1 ml-2\">\n                                        <h6>{item.properties.name}</h6>\n                                    </div>\n                                </div>\n                                <div className=\"ml-3 pl-4\">\n                                    <address>{item.properties.street}</address>\n                                    <address>{`${item.properties.city}, ${item.properties.state} ${item.properties.zip}`}</address>\n                                    <address>{item.properties.phone}</address>\n                                </div>\n                            </li>)}\n                    </div>\n                    <div className=\"col-xs-8 col-sm-8 pr-0 pl-0\">\n                        <Map center={position} zoom={this.state.zoom} ref=\"map\"/>\n                    </div>\n                </div>\n\n            </React.Fragment>\n        );\n    }\n}\n","import React, {Component} from 'react';\nimport {Modal} from 'reactstrap';\nimport StoreMapView from './StoreMapView';\nimport ModalContent from './ModalContent';\nimport stores from \"../dataSet/stores.json\";\nimport {PageHeader} from '../utils/Common';\nclass MarketingAnalyst extends Component {\n    state = {\n        crumbsList: \"USA\",\n        show: false,\n        modalContent: \"\"\n    }\n    breadCrumbs(crumbs) {\n        this.setState({crumbsList: crumbs});\n    }\n    handleClose() {\n        this.setState({show: false, modalContent: \"\"});\n    }\n    handleShow = (modalContent, properties) => {\n        this.setState({\n            show: true,\n            modalContent: modalContent\n        }, () => {\n            //\n        });\n    }\n    render() {\n        console.log(this.state.show)\n        return (\n            <React.Fragment>\n                <div className=\"static-modal\">\n                    <Modal\n                        isOpen={this.state.show}\n                        className=\"custom-modal modal-lg\"\n                        toggle={() => this.handleClose()}>\n                        <ModalContent contentType={this.state.modalContent}/>\n                    </Modal>\n                </div>\n                <PageHeader header=\"Supply Chain Analytics\"/>\n                <div className=\"row placeholders\">\n                    <div className=\"col-xs-12 col-sm-12 placeholder insight-tab\">\n                        <div className=\"leaflet-container\">\n                            <StoreMapView\n                                handleShow={(modalContent) => this.handleShow(modalContent)}\n                                breadCrumbs={(crumbs) => this.breadCrumbs(crumbs)}\n                                stores={stores}/>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default MarketingAnalyst;","import React from 'react';\nimport {Table} from 'reactstrap';\n\nclass ModalTable extends React.Component {\n    render() {\n        const {data} = this.props;\n        return (\n            <Table striped bordered condensed hover>\n                <thead>\n                    <tr>\n                        {Object\n                            .keys(data[0])\n                            .map((item, index) => <th key={index}>{item}</th>)\n}\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map((item, index) => {\n                        return (\n                            <tr key={index}>\n                                {Object\n                                    .values(item)\n                                    .map((item, index) => {\n                                        return (\n                                            <td key={index}>{item}</td>\n                                        )\n                                    })\n}\n                            </tr>\n                        )\n                    })\n}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default ModalTable;","import React from 'react';\nimport {Media} from 'reactstrap';\nimport img from '../images/unnamed.png';\nclass ModalChart extends React.Component {\n    render() {\n        return (\n            <div>\n                <img\n                    object\n                    src={img}\n                    style={{\n                    width: \"100%\",\n                    height: \"auto\"\n                }}/>\n            </div>\n        )\n    }\n}\n\nexport default ModalChart;","import React from 'react';\nimport ReactHighcharts from 'react-highcharts';\nimport predict from '../dataSet/predict.json'\n\nclass ModalHighChart extends React.Component {\n    render() {\n        const WEEK_TEMP = predict\n            .filter(item => item.WEEK_TEMP)\n            .map(item => item.WEEK_TEMP);\n\n        const TEMP_PREDICTION = predict\n            .filter(item => item.TEMP_PREDICTION)\n            .map(item => item.TEMP_PREDICTION);\n\n        const ACTIVITY_PREDICTION = predict\n            .filter(item => item.ACTIVITY_PREDICTION)\n            .map(item => item.ACTIVITY_PREDICTION);\n\n        const config = {\n            title: {\n                text: ''\n            },\n            yAxis: [\n                { // Primary yAxis\n                    labels: {\n                        format: '{value}°C'\n                    },\n                    title: {\n                        text: 'Temperature'\n                    }\n\n                }, {\n                    labels: {\n                        format: 'Int'\n                    },\n                    title: {\n                        text: 'Activity'\n                    },\n                    opposite: true\n\n                }\n            ],\n            legend: {\n                layout: 'vertical',\n                align: 'right',\n                verticalAlign: 'middle'\n            },\n\n            plotOptions: {\n                series: {\n                    label: {\n                        connectorAllowed: false\n                    },\n                    pointStart: 35\n                }\n            },\n\n            series: [\n                {\n                    name: 'Weekly Temperature',\n                    data: WEEK_TEMP\n                }, {\n                    name: 'Temperature Prediction',\n                    data: TEMP_PREDICTION\n                }, {\n                    name: 'Activity Prediction',\n                    data: ACTIVITY_PREDICTION\n                }\n            ],\n\n            responsive: {\n                rules: [\n                    {\n                        condition: {\n                            maxWidth: 500\n                        },\n                        chartOptions: {\n                            legend: {\n                                layout: 'horizontal',\n                                align: 'center',\n                                verticalAlign: 'bottom'\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n        return (\n            <div><ReactHighcharts config={config}/></div>\n        )\n    }\n}\n\nexport default ModalHighChart;","import React from 'react';\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\nimport ModalTable from './ModalTable';\nimport ModalChart from './ModalChart';\nimport ModalHighChart from './ModalHighChart';\nimport csvjson from '../dataSet/csvjson.json';\nimport metrics from '../dataSet/metrics.json';\nclass ModalContent extends React.Component {\n\n    render() {\n        const {contentType} = this.props;\n        return (\n            <React.Fragment>\n                <ModalHeader >\n                    {contentType.toUpperCase()}\n                </ModalHeader>\n                <ModalBody>\n                    {contentType === 'table'\n                        ? <div className=\"modal-table\"><ModalTable data={csvjson}/></div>\n                        : contentType === 'chart'\n                            ? <div><ModalChart/></div>\n                            : contentType === 'metrics'\n                                ? <div className=\"modal-table\"><ModalTable data={metrics}/></div>\n                                : contentType === 'predict line'\n                                    ? <div><ModalHighChart/></div>\n                                    : \"\"\n}\n                </ModalBody>\n                <ModalFooter></ModalFooter>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default ModalContent;","module.exports = __webpack_public_path__ + \"static/media/unnamed.70b75ef4.png\";"],"sourceRoot":""}